#!/bin/bash
set -eo pipefail

help() {
    cat <<-EOF
[GitHub CLI] extension to check unread notifications

Usage:
    gh noti             list all unread notifications
    gh noti read        mark all notifications as read
    gh noti read <id>   mark a thread with <id> as read

EOF
}

list() {
    # get unread noti, extract & format json
    UNREAD_NOTI=`gh api notifications --jq '.[] | {id: .id, reason: .reason, updated: .updated_at, title: .subject.title, url: .subject.url, type: .subject.type, repo: .repository.full_name}'`
    UNREAD_NOTI_COUNT=`echo $UNREAD_NOTI | jq -s length`

    if [ "$UNREAD_NOTI_COUNT" = 0 ]; then
        echo "âœ¨ No unread notifications."
        exit 0
    fi

    # format unread noti as table
    F_UNREAD_NOTI=`echo $UNREAD_NOTI | jq -s -r '["ID","Repo","Type","Title","Reason","Updated"], ["-------","------","-------","---------------","------","-------------------"], (.[] | [.id, .repo, .type, .title, .reason, .updated]) | @tsv' | column -ts $'\t'`
    printf '%s\n' "$F_UNREAD_NOTI" # use printf instead of echo can keep tab char
}

read() {
    id="$1"
    if [[ -z $id ]]; then
        gh api notifications --method PUT --silent && echo "All notifications read~"          # mark all noti as read
    else
        gh api notifications/threads/$id --method PATCH --silent && echo "Thread $id read~"   # mark thread with <id> as read
    fi
}

# main
if [[ $# -eq 0 ]]; then
    list
    exit 0
fi

while [ $# -gt 0 ]; do
    case "$1" in
    -h | --help)
        help
        exit 0
        ;;
    read)
        if [[ -z "$2" ]]; then
            read
        else
            shift
            input=$*
            read "$input"
        fi
        ;;
    *)
        help >&2
        exit 1
        ;;
    esac
    shift
done
